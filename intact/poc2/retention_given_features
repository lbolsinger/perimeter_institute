import pandas as pd

df = pd.read_csv('clients.csv')

def bucket_age(age):
    if age < 20:
        return '<20'
    elif age < 40:
        return '20-39'
    elif age < 60:
        return '40-59'
    else:
        return '60+'

def bucket_accidents(acc):
    if acc == 0:
        return 'low'
    elif acc < 3:
        return 'medium'
    else:
        return 'high'

def bucket_income(income):
    if income < 20000:
        return '<20k'
    elif income < 50000:
        return '20k-50k'
    elif income < 80000:
        return '50k-80k'
    else:
        return '80k+'


def calculate_conditional_retention_probability(df, sex=None, age=None, marital_status=None, income=None, accidents=None, treatment=None):
    """
    Calculates the conditional probability of retention based on given characteristics and treatment.
    Uses bucketing internally for age, accidents, and income if provided as raw values.

    Args:
        df (pd.DataFrame): The DataFrame containing client data.
        sex (str, optional): The sex of the client ('m' or 'f'). Defaults to None (all sexes).
        age (int, optional): The age of the client. Will be bucketed internally. Defaults to None.
        marital_status (str, optional): The marital status ('single' or 'married'). Defaults to None (all statuses).
        income (int, optional): The income of the client. Will be bucketed internally. Defaults to None.
        accidents (int, optional): The number of accidents. Will be bucketed internally. Defaults to None.
        treatment (float, optional): The treatment applied. Defaults to None (all treatments).

    Returns:
        float: The conditional probability of retention. Returns NaN if no clients match the criteria.
    """
    filtered_df = df.copy()

    if sex is not None:
        filtered_df = filtered_df[filtered_df['sex'] == sex]
    if age is not None:
        filtered_df = filtered_df[filtered_df['age'].apply(bucket_age) == bucket_age(age)]
    if marital_status is not None:
        filtered_df = filtered_df[filtered_df['marital_status'] == marital_status]
    if income is not None:
        filtered_df = filtered_df[filtered_df['income'].apply(bucket_income) == bucket_income(income)]
    if accidents is not None:
        filtered_df = filtered_df[filtered_df['accidents'].apply(bucket_accidents) == bucket_accidents(accidents)]
    if treatment is not None:
        filtered_df = filtered_df[filtered_df['treatment'] == treatment]

    if filtered_df.empty:
        return float('nan')
    else:
        return filtered_df['retained'].mean()

retention_by_sex = df.groupby('sex')['retained'].mean()
print(retention_by_sex, "\n")

retention_by_age = df.groupby(df['age'].apply(bucket_age))['retained'].mean()
age_bucket_order = ['<20', '20-39', '40-59', '60+']
retention_by_age = retention_by_age.reindex(age_bucket_order)
print(retention_by_age, "\n")

retention_by_marital_status = df.groupby('marital_status')['retained'].mean()
print(retention_by_marital_status, "\n")

retention_by_income = df.groupby(df['income'].apply(bucket_income))['retained'].mean()
income_bucket_order = ['<20k', '20k-50k', '50k-80k', '80k+']
retention_by_income = retention_by_income.reindex(income_bucket_order)
print(retention_by_income, "\n")

retention_by_accidents = df.groupby(df['accidents'].apply(bucket_accidents))['retained'].mean()
accident_bucket_order = ['low', 'medium', 'high']
retention_by_accidents = retention_by_accidents.reindex(accident_bucket_order)
print(retention_by_accidents, "\n")

pivot_table_sex_treatment = df.pivot_table(values='retained', index='sex', columns='treatment', aggfunc='mean')
print(pivot_table_sex_treatment, "\n")

pivot_table_age_treatment = df.pivot_table(values='retained', index=df['age'].apply(bucket_age), columns='treatment', aggfunc='mean')
age_bucket_order = ['<20', '20-39', '40-59', '60+']
pivot_table_age_treatment = pivot_table_age_treatment.reindex(age_bucket_order)
print(pivot_table_age_treatment, "\n")

pivot_table_marital_status_treatment = df.pivot_table(values='retained', index='marital_status', columns='treatment', aggfunc='mean')
print(pivot_table_marital_status_treatment, "\n")

df['accidents_bucket'] = df['accidents'].apply(bucket_accidents)
pivot_table_accidents_treatment = df.pivot_table(values='retained', index='accidents_bucket', columns='treatment', aggfunc='mean')
accident_bucket_order = ['low', 'medium', 'high']
pivot_table_accidents_treatment = pivot_table_accidents_treatment.reindex(accident_bucket_order)
print(pivot_table_accidents_treatment, "\n")

df['income_bucket'] = df['income'].apply(bucket_income)
pivot_table_income_treatment = df.pivot_table(values='retained', index='income_bucket', columns='treatment', aggfunc='mean')
income_bucket_order = ['<20k', '20k-50k', '50k-80k', '80k+']
pivot_table_income_treatment = pivot_table_income_treatment.reindex(income_bucket_order)
print(pivot_table_income_treatment, "\n")
